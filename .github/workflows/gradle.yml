# Github Actions script
name: Spring Boot & Gradle CI/CD

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: my-work-project
  CODE_DEPLOY_APPLICATION_NAME: slog-codedeploy
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: slog-codedeploy-group

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      # (1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v2

      # (2) JDK 11 설치
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'

      # (3) gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # (4) Gradle build (Test 제외)
      - name: Build with Gradle
        run: ./gradlew clean build -x test --warning-mode all

      # (5) Docker 이미지 빌드 및 태그
      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: |
            slog:${{ github.sha }}
            slog:latest

      # (6) Docker 이미지를 tar로 저장 후 S3에 업로드
      - name: Upload Docker image to S3
        run: |
          docker save slog:${{ github.sha }} | gzip > slog-${{ github.sha }}.tar.gz &&
          aws s3 cp slog-${{ github.sha }}.tar.gz s3://$S3_BUCKET_NAME/slog-${{ github.sha }}.tar.gz

      # (7) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
          aws-region: ${{ env.AWS_REGION }}

      # (8) 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .

      # (9) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
